#version 450 core
layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

// Binding 0: Depth input (float array)
layout(std430, binding = 0) buffer DepthBuffer {
    float depth[];
};

// Binding 1: RGB input (float array, assume each pixel has 3 floats: R,G,B)
layout(std430, binding = 1) buffer RGBBuffer {
    float rgb[];
};

// Binding 2: Intrinsics buffer [fx, fy, cx, cy, scale, width, height]
layout(std430, binding = 2) buffer IntrinsicsBuffer {
    float intrinsics[];
};

// Binding 3: Output XYZ buffer (float array, 3 floats per pixel)
layout(std430, binding = 3) buffer XYZBuffer {
    float xyz[];
};

// Binding 4: Output RGB buffer (float array, 3 floats per pixel)
layout(std430, binding = 4) buffer OutRGBBuffer {
    float outRgb[];
};

void main() {
    uint i = gl_GlobalInvocationID.x;

    float fx = intrinsics[0];
    float fy = intrinsics[1];
    float cx = intrinsics[2];
    float cy = intrinsics[3];
    float scale = intrinsics[4];
    float width = intrinsics[5];
    float height = intrinsics[6];

    if (i >= uint(width * height)) {
        return;
    }

    uint u = i % uint(width);
    uint v = i / uint(width);

    float z = depth[i] * scale;
    float x = (float(u) - cx) * z / fx;
    float y = (float(v) - cy) * z / fy;

    xyz[i * 3 + 0] = x;
    xyz[i * 3 + 1] = y;
    xyz[i * 3 + 2] = z;

    // Copy RGB directly
    outRgb[i * 3 + 0] = rgb[i * 3 + 0];
    outRgb[i * 3 + 1] = rgb[i * 3 + 1];
    outRgb[i * 3 + 2] = rgb[i * 3 + 2];
}

